import * as Sharing from 'expo-sharing';
import * as FileSystem from 'expo-file-system';
import { Trip, Vessel, WeatherData } from '../types';

interface TripExport {
  tripDetails: Trip;
  vesselDetails: Vessel;
  weatherData: WeatherData[];
  exportDate: string;
  version: string;
}

export const generateTripReport = (trip: Trip, vessel: Vessel): string => {
  const startDate = new Date(trip.startTime).toLocaleDateString();
  const startTime = new Date(trip.startTime).toLocaleTimeString();
  const endTime = trip.endTime ? new Date(trip.endTime).toLocaleTimeString() : 'Ongoing';
  
  const routePoints = trip.route.length;
  const distance = trip.route.length > 1 ? calculateTotalDistance(trip.route) : 0;
  
  const report = `
SAILING TRIP REPORT
==================

Date: ${startDate}
Time: ${startTime} - ${endTime}
Vessel: ${vessel.name} (${vessel.type})

TRIP DETAILS
-----------
Distance: ${distance.toFixed(1)} nautical miles
Route Points: ${routePoints}
Crew Members: ${trip.crewMembers.map(crew => `${crew.name} (${crew.role})`).join(', ')}

WEATHER CONDITIONS
----------------
${trip.weatherConditions.map(weather => `
Time: ${new Date(weather.timestamp).toLocaleTimeString()}
Temperature: ${weather.temperature}°C
Wind: ${weather.windSpeed} knots from ${weather.windDirection}°
Pressure: ${weather.pressure} hPa
Conditions: ${weather.notes}
`).join('\n')}

ROUTE COORDINATES
---------------
${trip.route.map((point, index) => 
  `${index + 1}. ${point.latitude.toFixed(6)}, ${point.longitude.toFixed(6)}`
).join('\n')}

Generated by MySailLog
`;

  return report;
};

export const shareTripAsText = async (trip: Trip, vessel: Vessel) => {
  try {
    const report = generateTripReport(trip, vessel);
    const filePath = `${FileSystem.cacheDirectory}trip_${trip.id}.txt`;
    
    await FileSystem.writeAsStringAsync(filePath, report);
    
    if (await Sharing.isAvailableAsync()) {
      await Sharing.shareAsync(filePath, {
        mimeType: 'text/plain',
        dialogTitle: 'Share Trip Report',
      });
    }
  } catch (error) {
    console.error('Error sharing trip:', error);
    throw error;
  }
};

export const exportTripData = async (trip: Trip, vessel: Vessel): Promise<string> => {
  try {
    const exportData: TripExport = {
      tripDetails: trip,
      vesselDetails: vessel,
      weatherData: trip.weatherConditions,
      exportDate: new Date().toISOString(),
      version: '1.0.0',
    };

    const jsonString = JSON.stringify(exportData, null, 2);
    const filePath = `${FileSystem.cacheDirectory}trip_${trip.id}.json`;
    
    await FileSystem.writeAsStringAsync(filePath, jsonString);
    
    if (await Sharing.isAvailableAsync()) {
      await Sharing.shareAsync(filePath, {
        mimeType: 'application/json',
        dialogTitle: 'Export Trip Data',
      });
    }

    return filePath;
  } catch (error) {
    console.error('Error exporting trip data:', error);
    throw error;
  }
};

const calculateTotalDistance = (route: { latitude: number; longitude: number }[]): number => {
  let totalDistance = 0;
  for (let i = 1; i < route.length; i++) {
    const R = 6371e3; // Earth's radius in meters
    const φ1 = (route[i-1].latitude * Math.PI) / 180;
    const φ2 = (route[i].latitude * Math.PI) / 180;
    const Δφ = ((route[i].latitude - route[i-1].latitude) * Math.PI) / 180;
    const Δλ = ((route[i].longitude - route[i-1].longitude) * Math.PI) / 180;

    const a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +
              Math.cos(φ1) * Math.cos(φ2) *
              Math.sin(Δλ/2) * Math.sin(Δλ/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

    const distance = R * c;
    totalDistance += distance;
  }
  
  return totalDistance / 1852; // Convert meters to nautical miles
};